<?php

namespace MGD\BasicBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MGD\BasicBundle\Entity\Pedido;

/**
 * PedidoBots
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaypalAccountsPaymentRepository extends EntityRepository
{


    /**
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    public function getRowsExpensesByFecha($dateFromTimestamp=null,$dateUntilTimestamp=null)
    {
        $sql="SELECT sum(p.precio)*(-1)  as gastos, DATE_FORMAT(p.fecha,'%Y-%m') as mes
              FROM paypal_accounts_payment as p
              WHERE
                p.precio < 0 "
            .($dateFromTimestamp && $dateUntilTimestamp ? " AND p.fecha BETWEEN '$dateFromTimestamp' AND '$dateUntilTimestamp' ": '').
            "
              GROUP BY mes
              ORDER BY p.fecha ASC, p.paypal_account_id ASC
            "
        ;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $resultado = $stmt->fetchAll();

        return $this->setFormatResultToChartSimpleArray($resultado,$dateFromTimestamp,$dateUntilTimestamp);

    }

    /**
     * @param array $resultadoSQL
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    private function setFormatResultToChartSimpleArray(array $resultadoSQL,$dateFromTimestamp,$dateUntilTimestamp)
    {

        if (!$dateFromTimestamp)
            $dateFromTimestamp=$resultadoSQL[0]['mes'].' 00:00:00';

        if (!$dateUntilTimestamp)
            $dateUntilTimestamp=$resultadoSQL[count($resultadoSQL)-1]['mes'].' 00:00:00';

        $fechaFin = new \DateTime($dateUntilTimestamp);
        $fechaFin = $fechaFin->add(\DateInterval::createFromDateString('+1 month'));

        $result=array();

        $cont=0;

        $fechaActual = new \DateTime($dateFromTimestamp);

        while($fechaActual->format('Y-m') != $fechaFin->format('Y-m'))
        {
            if (isset($resultadoSQL[$cont]) && $fechaActual->format('Y-m') == $resultadoSQL[$cont]['mes'])
            {
                $result[]=$resultadoSQL[$cont];
                $cont++;
                $fechaActual=$fechaActual->add(\DateInterval::createFromDateString('+1 month'));
            }else{

                $aux['mes']=$fechaActual->format('Y-m');
                $aux['gastos']=0;

                $result[]=$aux;
                $fechaActual=$fechaActual->add(\DateInterval::createFromDateString('+1 month'));
            }

        }

        return $result;
    }

    /**
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    public function getRowsPaymentsToUsersByFecha($dateFromTimestamp=null,$dateUntilTimestamp=null)
    {
        $sql="SELECT sum(p.precio) as ganado, DATE_FORMAT(p.fecha,'%Y-%m') as mes, p.paypal_account_id
              FROM paypal_accounts_payment as p
              WHERE
                p.precio > 0 "
            .($dateFromTimestamp && $dateUntilTimestamp ? " AND p.fecha BETWEEN '$dateFromTimestamp' AND '$dateUntilTimestamp' ": '').
            "
              GROUP BY mes, p.paypal_account_id
              ORDER BY p.fecha ASC, p.paypal_account_id ASC
            "
        ;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $resultado = $stmt->fetchAll();

        return $this->setFormatResultToChart($resultado,$dateFromTimestamp,$dateUntilTimestamp);

    }

    /**
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    public function getRowsSumPaymentsToUsersByFecha($dateFromTimestamp=null,$dateUntilTimestamp=null)
    {
        $sql="SELECT sum(p.precio) as ganado, DATE_FORMAT(p.fecha,'%Y-%m') as mes, p.paypal_account_id, a.name
              FROM paypal_accounts_payment as p
              INNER JOIN paypal_account as a on (a.id=p.paypal_account_id)
              WHERE
                p.precio > 0 "
            .($dateFromTimestamp && $dateUntilTimestamp ? " AND p.fecha BETWEEN '$dateFromTimestamp' AND '$dateUntilTimestamp' ": '').
            "
              GROUP BY p.paypal_account_id
              ORDER BY p.fecha ASC, p.paypal_account_id ASC
            "
        ;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $resultado = $stmt->fetchAll();

        return $resultado;

    }

    /**
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    public function getRowsExpensesToUsersByFecha($dateFromTimestamp,$dateUntilTimestamp)
    {
        $sql="SELECT sum(p.precio)*(-1) as ganado, DATE_FORMAT(p.fecha,'%Y-%m') as mes, p.paypal_account_id
              FROM paypal_accounts_payment as p
              WHERE
                p.precio < 0
                "
                .($dateFromTimestamp && $dateUntilTimestamp ? " AND p.fecha BETWEEN '$dateFromTimestamp' AND '$dateUntilTimestamp' ": '').
            "
              GROUP BY mes, p.paypal_account_id
              ORDER BY p.fecha ASC, p.paypal_account_id ASC
            "
        ;

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $resultado = $stmt->fetchAll();

        return $this->setFormatResultToChart($resultado,$dateFromTimestamp,$dateUntilTimestamp);

    }


    /**
     * @param array $resultadoSQL
     * @param $dateFromTimestamp
     * @param $dateUntilTimestamp
     * @return array
     */
    private function setFormatResultToChart(array $resultadoSQL,$dateFromTimestamp,$dateUntilTimestamp)
    {
        /** @var PaypalAccount[] $accounts */
        $accounts = $this->getEntityManager()->getRepository('MGDBasicBundle:PaypalAccount')->findAll();

        if (!$dateFromTimestamp)
            $dateFromTimestamp=$resultadoSQL[0]['mes'].' 00:00:00';

        if (!$dateUntilTimestamp)
            $dateUntilTimestamp=$resultadoSQL[count($resultadoSQL)-1]['mes'].' 00:00:00';

        $fechaFin = new \DateTime($dateUntilTimestamp);
        $fechaFin = $fechaFin->add(\DateInterval::createFromDateString('+1 month'));
        $result=array();

        foreach ($accounts as $acc)
        {
            $row = array();
            $cont=0;

            $fechaActual = new \DateTime($dateFromTimestamp);

            while($fechaActual->format('Y-m') != $fechaFin->format('Y-m'))
            {
                if (isset($resultadoSQL[$cont]) && $fechaActual->format('Y-m') == $resultadoSQL[$cont]['mes'])
                {
                    if ($acc->getId()==$resultadoSQL[$cont]['paypal_account_id'])
                    {
                        $resultadoSQL[$cont]['paypal_account_name']=$acc->getName();
                        $row[]=$resultadoSQL[$cont];
                        $cont++;
                        $fechaActual=$fechaActual->add(\DateInterval::createFromDateString('+1 month'));
                    }else{
                        $cont++;
                    }

                }else{

                    $aux['mes']=$fechaActual->format('Y-m');
                    $aux['ganado']=0;
                    $aux['paypal_account_id']=$acc->getId();
                    $aux['paypal_account_name']=$acc->getName();
                    $row[]=$aux;
                    $fechaActual=$fechaActual->add(\DateInterval::createFromDateString('+1 month'));
                }

            }
            $result[]=$row;
        }

        return $result;
    }

}
