<?php

namespace MGD\BasicBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MGD\BasicBundle\Entity\Pedido;

/**
 * PedidoBots
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaypalAccountRepository extends EntityRepository
{


    /**
     * @param PaypalAccount $diferentTo
     * @return mixed
     */
    public function getOneByActive(PaypalAccount $diferentTo = null)
    {
        $sql="SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            WHERE
                p.active = true"
            . ($diferentTo ? ' AND p.id <> ' . $diferentTo->getId() : '')
        ;

        return $this->getEntityManager()
            ->createQuery($sql)
            ->getOneOrNullResult();
            ;
    }


    /**
     * @param PaypalAccount $ppAcc
     * @return PaypalAccount
     */
    public function getNextAccount(PaypalAccount $ppAcc)
    {
        $ppAccNext = $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            WHERE
                p.orderN > :order
            ORDER BY p.orderN ASC
            ')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->setParameters(array('order' => $ppAcc->getOrderN()))
            ->getOneOrNullResult();
        ;

        if (!$ppAccNext)
        {
            $ppAccNext = $this->getFirst();
        }

        return $ppAccNext;
    }

    /**
     * @return PaypalAccount
     */
    public function getFirst()
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            ORDER BY p.orderN ASC
            ')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getOneOrNullResult()
        ;
    }

    /**
     * @return integer
     */
    public function getMaxOrderN()
    {
        return
            $this->getEntityManager()
                ->createQuery('
                SELECT max(p.orderN)
                FROM MGDBasicBundle:PaypalAccount p
                ')
                ->getSingleScalarResult()
        ;
    }

    /**
     * @return PaypalAccount
     */
    public function getOneMaxOrderN()
    {
        return
            $this->getEntityManager()
                ->createQuery('
                SELECT p
                FROM MGDBasicBundle:PaypalAccount p
                ORDER BY p.orderN DESC
                ')
                ->setFirstResult(0)
                ->setMaxResults(1)
                ->getOneOrNullResult()
        ;
    }

}
