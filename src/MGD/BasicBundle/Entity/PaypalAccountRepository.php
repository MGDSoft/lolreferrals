<?php

namespace MGD\BasicBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MGD\BasicBundle\Entity\Pedido;

/**
 * PedidoBots
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaypalAccountRepository extends EntityRepository
{

    /**
     * @return PaypalAccount
     */
    public function getOneByActive()
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            WHERE
                p.active = true
            ')
            ->getOneOrNullResult();
            ;
    }


    /**
     * @param PaypalAccount $ppAcc
     * @return PaypalAccount
     */
    public function getNextAccount(PaypalAccount $ppAcc)
    {
        $ppAccNext = $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            WHERE
                p.order > :order
            ORDER BY p.order ASC
            ')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->setParameters(array('order' => $ppAcc->getOrder()))
            ->getOneOrNullResult();
        ;

        if (!$ppAccNext)
        {
            $ppAccNext = $this->getFirst();
        }

        return $ppAccNext;
    }

    /**
     * @return PaypalAccount
     */
    public function getFirst()
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            ORDER BY p.order ASC
            ')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getOneOrNullResult();
        ;
    }

    /**
     * @return PaypalAccount
     */
    public function getMaxOrder()
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p
            FROM MGDBasicBundle:PaypalAccount p
            ORDER BY p.order DESC
            ')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getOneOrNullResult();
        ;
    }

}
